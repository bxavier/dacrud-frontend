{
  "ai_settings": {
    "project_context": {
      "coding_principles": {
        "SOLID": "Follow SOLID principles",
        "DRY": "Avoid code duplication",
        "KISS": "Keep solutions simple",
        "YAGNI": "Don't implement until necessary"
      },
      "architectural_approach": {
        "simplicity": "Keep everything as simple as possible",
        "minimal_dependencies": "Use few external libraries, prefer Angular built-ins"
      },
      "code_formatting": {
        "linting": "ESLint with Angular rules",
        "formatting": "Prettier with singleQuote, tabWidth: 2, printWidth: 100"
      },
      "css_methodology": {
        "approach": "BEM (Block Element Modifier)",
        "naming": "Use kebab-case for blocks, elements, and modifiers",
        "nesting": "Use SCSS nesting with & operator for BEM structure",
        "scss_pattern": {
          "blocks": "Define top-level block selector first",
          "elements": "Use &__element for child elements",
          "modifiers": "Use &--modifier for variations of elements or blocks",
          "nesting_depth": "Limit SCSS nesting to 3 levels maximum",
          "example": ".block { &__element { &--modifier {} } }"
        },
        "structure": "Group related styles with comment blocks for organization"
      },
      "state_management": {
        "approach": "Use Angular signals for state",
        "store": "Signal-based stores instead of NGRX/Redux"
      },
      "ui_framework": {
        "library": "Angular Material",
        "theme": "Magenta/Violet prebuilt theme",
        "typography": "Use Material global typography styles",
        "pattern": "Follow Material Design guidelines and patterns"
      },
      "angular_architecture": {
        "component_pattern": {
          "approach": "Container/Presentational pattern",
          "change_detection": "OnPush change detection",
          "inputs": "Use signal-based input()"
        },
        "folder_structure": {
          "organization": "Feature-based by domain",
          "layout": "core/, shared/, features/, data-access/",
          "core": {
            "purpose": "App-wide singleton services, guards, interceptors",
            "structure": "services/, interceptors/, guards/, components/",
            "restrictions": "No feature-specific code allowed"
          },
          "features": {
            "purpose": "Domain-specific functionality",
            "structure": "{feature-name}/components/, {feature-name}/services/, {feature-name}/models/",
            "module_pattern": "Each feature should be a standalone loadable unit"
          },
          "shared": {
            "purpose": "Reusable components, pipes, directives",
            "structure": "components/, pipes/, directives/, utils/",
            "restrictions": "No service dependencies on feature modules"
          },
          "data-access": {
            "purpose": "Data services, state management, API interfaces",
            "structure": "api/, store/, models/",
            "pattern": "Follow repository pattern for data access"
          }
        },
        "file_naming": {
          "pattern": "{name}.{type}.ts",
          "examples": "user.service.ts, auth.guard.ts, product.model.ts"
        },
        "route_strategy": {
          "lazy_loading": "Lazy load routes",
          "standalone": "Use standalone components"
        },
        "api_pattern": {
          "service_abstraction": "API services in data-access layer",
          "signal_conversion": "Convert observables to signals at edge"
        },
        "store_pattern": {
          "implementation": "Signal-based stores with state, computed, actions",
          "immutability": "Maintain immutability using signal.update()"
        }
      }
    }
  }
}
