{
  "ai_settings": {
    "project_context": {
      "coding_principles": {
        "SOLID": "Follow SOLID principles",
        "DRY": "Avoid code duplication",
        "KISS": "Keep solutions simple",
        "YAGNI": "Don't implement until necessary"
      },
      "architectural_approach": {
        "simplicity": "Keep everything as simple as possible",
        "minimal_dependencies": "Use few external libraries, prefer Angular built-ins"
      },
      "code_formatting": {
        "linting": "ESLint with Angular rules",
        "formatting": "Prettier with singleQuote, tabWidth: 2, printWidth: 100"
      },
      "state_management": {
        "approach": "Use Angular signals for state",
        "store": "Signal-based stores instead of NGRX/Redux"
      },
      "ui_framework": {
        "library": "Angular Material",
        "theme": "Magenta/Violet prebuilt theme",
        "typography": "Use Material global typography styles",
        "pattern": "Follow Material Design guidelines and patterns"
      },
      "angular_architecture": {
        "component_pattern": {
          "approach": "Container/Presentational pattern",
          "change_detection": "OnPush change detection",
          "inputs": "Use signal-based input()"
        },
        "folder_structure": {
          "organization": "Feature-based by domain",
          "layout": "core/, shared/, features/, data-access/"
        },
        "route_strategy": {
          "lazy_loading": "Lazy load routes",
          "standalone": "Use standalone components"
        },
        "api_pattern": {
          "service_abstraction": "API services in data-access layer",
          "signal_conversion": "Convert observables to signals at edge"
        },
        "store_pattern": {
          "implementation": "Signal-based stores with state, computed, actions",
          "immutability": "Maintain immutability using signal.update()"
        }
      }
    }
  }
}
